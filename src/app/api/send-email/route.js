import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';

export async function POST(req) {
  console.log('üìß Email API: Starting email processing...');
  
  try {
    const { name, phone, email, message } = await req.json();
    console.log('üìß Email API: Received form data:', { name, phone, email, messageLength: message?.length });

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    const transporter = nodemailer.createTransport({
      host: 'mail.webstroke.ru',
      port: 465,
      secure: true, // true –¥–ª—è –ø–æ—Ä—Ç–∞ 465
      auth: {
        user: 'task@webstroke.ru',
        pass: process.env.EMAIL_PASSWORD,
      },
      tls: {
        rejectUnauthorized: false // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      },
      debug: true, // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
      logger: true // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üìß Email API: Verifying SMTP connection...');
    await transporter.verify();
    console.log('‚úÖ Email API: SMTP connection verified');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    const mailOptions = {
      from: {
        name: '–í–µ–±–®—Ç—Ä–∏—Ö - –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
        address: 'task@webstroke.ru'
      },
      to: 'task@webstroke.ru',
      subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h2>
          <div style="background: #f5f5f5; padding: 20px; border-radius: 5px;">
            <p><strong>–ò–º—è:</strong> ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p><strong>Email:</strong> ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
            <div style="background: white; padding: 15px; border-radius: 3px; margin-top: 10px;">
              ${message || '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
            </div>
          </div>
          <div style="margin-top: 20px; font-size: 12px; color: #666;">
            <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞ webstroke.ru</p>
          </div>
        </div>
      `,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    console.log('üìß Email API: Sending email...');
    const info = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Email API: Email sent successfully', info);

    return NextResponse.json(
      { message: 'Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', messageId: info.messageId },
      { status: 200 }
    );
  } catch (error) {
    console.error('‚ùå Email API: Error sending email:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    const errorDetails = {
      name: error.name,
      message: error.message,
      code: error.code,
      command: error.command,
      responseCode: error.responseCode,
      response: error.response,
      stack: error.stack
    };
    console.error('‚ùå Email API: Error details:', errorDetails);

    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email',
        details: error.message,
        code: error.code
      },
      { status: 500 }
    );
  }
} 
